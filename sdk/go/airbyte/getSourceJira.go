// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package airbyte

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SourceJira DataSource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-airbyte/sdk/go/airbyte"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := airbyte.LookupSourceJira(ctx, &airbyte.LookupSourceJiraArgs{
//				SourceId: "...my_source_id...",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSourceJira(ctx *pulumi.Context, args *LookupSourceJiraArgs, opts ...pulumi.InvokeOption) (*LookupSourceJiraResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSourceJiraResult
	err := ctx.Invoke("airbyte:index/getSourceJira:getSourceJira", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSourceJira.
type LookupSourceJiraArgs struct {
	SourceId string `pulumi:"sourceId"`
}

// A collection of values returned by getSourceJira.
type LookupSourceJiraResult struct {
	// The values required to configure the source. Parsed as JSON.
	Configuration string `pulumi:"configuration"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	SourceId    string `pulumi:"sourceId"`
	SourceType  string `pulumi:"sourceType"`
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupSourceJiraOutput(ctx *pulumi.Context, args LookupSourceJiraOutputArgs, opts ...pulumi.InvokeOption) LookupSourceJiraResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceJiraResult, error) {
			args := v.(LookupSourceJiraArgs)
			r, err := LookupSourceJira(ctx, &args, opts...)
			var s LookupSourceJiraResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceJiraResultOutput)
}

// A collection of arguments for invoking getSourceJira.
type LookupSourceJiraOutputArgs struct {
	SourceId pulumi.StringInput `pulumi:"sourceId"`
}

func (LookupSourceJiraOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceJiraArgs)(nil)).Elem()
}

// A collection of values returned by getSourceJira.
type LookupSourceJiraResultOutput struct{ *pulumi.OutputState }

func (LookupSourceJiraResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceJiraResult)(nil)).Elem()
}

func (o LookupSourceJiraResultOutput) ToLookupSourceJiraResultOutput() LookupSourceJiraResultOutput {
	return o
}

func (o LookupSourceJiraResultOutput) ToLookupSourceJiraResultOutputWithContext(ctx context.Context) LookupSourceJiraResultOutput {
	return o
}

// The values required to configure the source. Parsed as JSON.
func (o LookupSourceJiraResultOutput) Configuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.Configuration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSourceJiraResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSourceJiraResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSourceJiraResultOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.SourceId }).(pulumi.StringOutput)
}

func (o LookupSourceJiraResultOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.SourceType }).(pulumi.StringOutput)
}

func (o LookupSourceJiraResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceJiraResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceJiraResultOutput{})
}
