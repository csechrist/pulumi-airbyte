// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte
{
    /// <summary>
    /// SourceAirtable Resource
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Airbyte = Pulumi.Airbyte;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mySourceAirtable = new Airbyte.SourceAirtable("mySourceAirtable", new()
    ///     {
    ///         Configuration = new Airbyte.Inputs.SourceAirtableConfigurationArgs
    ///         {
    ///             Credentials = new Airbyte.Inputs.SourceAirtableConfigurationCredentialsArgs
    ///             {
    ///                 OAuth20 = new Airbyte.Inputs.SourceAirtableConfigurationCredentialsOAuth20Args
    ///                 {
    ///                     AccessToken = "...my_access_token...",
    ///                     ClientId = "...my_client_id...",
    ///                     ClientSecret = "...my_client_secret...",
    ///                     RefreshToken = "...my_refresh_token...",
    ///                     TokenExpiryDate = "2020-08-03T12:00:22.257Z",
    ///                 },
    ///             },
    ///         },
    ///         DefinitionId = "6e828b1d-2ddb-45da-a9ea-927cae7b29c8",
    ///         SecretId = "...my_secret_id...",
    ///         WorkspaceId = "5628652e-0ff8-43c2-9b51-7b16f1f8846b",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AirbyteResourceType("airbyte:index/sourceAirtable:SourceAirtable")]
    public partial class SourceAirtable : global::Pulumi.CustomResource
    {
        [Output("configuration")]
        public Output<Outputs.SourceAirtableConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires replacement if changed.
        /// </summary>
        [Output("definitionId")]
        public Output<string?> DefinitionId { get; private set; } = null!;

        /// <summary>
        /// Name of the source e.g. dev-mysql-instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
        /// </summary>
        [Output("secretId")]
        public Output<string?> SecretId { get; private set; } = null!;

        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;

        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a SourceAirtable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceAirtable(string name, SourceAirtableArgs args, CustomResourceOptions? options = null)
            : base("airbyte:index/sourceAirtable:SourceAirtable", name, args ?? new SourceAirtableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceAirtable(string name, Input<string> id, SourceAirtableState? state = null, CustomResourceOptions? options = null)
            : base("airbyte:index/sourceAirtable:SourceAirtable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceAirtable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceAirtable Get(string name, Input<string> id, SourceAirtableState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceAirtable(name, id, state, options);
        }
    }

    public sealed class SourceAirtableArgs : global::Pulumi.ResourceArgs
    {
        [Input("configuration", required: true)]
        public Input<Inputs.SourceAirtableConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires replacement if changed.
        /// </summary>
        [Input("definitionId")]
        public Input<string>? DefinitionId { get; set; }

        /// <summary>
        /// Name of the source e.g. dev-mysql-instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public SourceAirtableArgs()
        {
        }
        public static new SourceAirtableArgs Empty => new SourceAirtableArgs();
    }

    public sealed class SourceAirtableState : global::Pulumi.ResourceArgs
    {
        [Input("configuration")]
        public Input<Inputs.SourceAirtableConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided. Requires replacement if changed.
        /// </summary>
        [Input("definitionId")]
        public Input<string>? DefinitionId { get; set; }

        /// <summary>
        /// Name of the source e.g. dev-mysql-instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional secretID obtained through the public API OAuth redirect flow. Requires replacement if changed.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public SourceAirtableState()
        {
        }
        public static new SourceAirtableState Empty => new SourceAirtableState();
    }
}
