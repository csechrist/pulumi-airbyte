// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Airbyte.Inputs
{

    public sealed class SourceSftpBulkConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sync only the most recent file for the configured folder path and file pattern. Default: false
        /// </summary>
        [Input("fileMostRecent")]
        public Input<bool>? FileMostRecent { get; set; }

        /// <summary>
        /// The regular expression to specify files for sync in a chosen Folder Path. Default: ""
        /// </summary>
        [Input("filePattern")]
        public Input<string>? FilePattern { get; set; }

        /// <summary>
        /// The file type you want to sync. Currently only 'csv' and 'json' files are supported. must be one of ["csv", "json"]; Default: "csv"
        /// </summary>
        [Input("fileType")]
        public Input<string>? FileType { get; set; }

        /// <summary>
        /// The directory to search files for sync. Default: ""
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// The server host address
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// OS-level password for logging into the jump server host
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The server port. Default: 22
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The separator used in the CSV files. Define None if you want to use the Sniffer functionality. Default: ","
        /// </summary>
        [Input("separator")]
        public Input<string>? Separator { get; set; }

        /// <summary>
        /// The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
        /// </summary>
        [Input("startDate", required: true)]
        public Input<string> StartDate { get; set; } = null!;

        /// <summary>
        /// The name of the stream or table you want to create
        /// </summary>
        [Input("streamName", required: true)]
        public Input<string> StreamName { get; set; } = null!;

        /// <summary>
        /// The server user
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public SourceSftpBulkConfigurationGetArgs()
        {
        }
        public static new SourceSftpBulkConfigurationGetArgs Empty => new SourceSftpBulkConfigurationGetArgs();
    }
}
